import com.mongodb.client.MongoClients;
import com.mongodb.client.MongoClient;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;
import com.mongodb.client.model.Filters;
import com.mongodb.client.model.Sorts;
import org.bson.Document;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.io.PrintWriter;

@WebServlet("/getMyFavouriteDrink")
public class GetMyFavouriteDrinkServlet extends HttpServlet {

    private MongoCollection<Document> collection;
    private static final String MONGO_CONNECTION_STRING = "mongodb+srv://manjunathkp1298:2Xg3NY1C5rBlnbHa@dismprojectcluster.6ct1xxu.mongodb.net/?retryWrites=true&w=majority&appName=DISMProjectCluster";
    private static final String DB_NAME = "CocktailDB"; // Use the name of your database
    private static final String COLLECTION_NAME = "UserDrinkRequests"; // Use the name of your collection
    private static ServiceLogger logger = new ServiceLogger(MONGO_CONNECTION_STRING, DB_NAME, COLLECTION_NAME);

    @Override
    public void init() throws ServletException {
        super.init();
        String mongoConnectionString = MONGO_CONNECTION_STRING;
        MongoClient mongoClient = MongoClients.create(mongoConnectionString);
        MongoDatabase database = mongoClient.getDatabase(DB_NAME);
        this.collection = database.getCollection(COLLECTION_NAME);
    }

    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String authorizationHeader = request.getHeader("Authorization");
        if (authorizationHeader == null || !authorizationHeader.startsWith("Bearer ")) {
            response.sendError(HttpServletResponse.SC_UNAUTHORIZED, "Authorization header is missing or invalid.");
            return;
        }
        // Extract token without "Bearer " prefix
        String sessionToken = authorizationHeader.substring(7);

        // Query to find the most requested drink for the user identified by the session token
        Document mostRequestedDrink = collection.find(Filters.eq("userId", sessionToken))
                .sort(Sorts.descending("count"))
                .first();
        
        if (mostRequestedDrink == null) {
            response.sendError(HttpServletResponse.SC_NOT_FOUND, "No favorite drink found for the user.");
            return;
        }
        
        // Preparing and sending the response
        response.setContentType("application/json");
        PrintWriter out = response.getWriter();
        out.print(mostRequestedDrink.toJson());
        out.flush();
    }
}
